{"version":3,"sources":["components/customPlot/index.js","App.js","serviceWorker.js","index.js"],"names":["CustomPlot","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","layout","width","height","title","datarevision","data","x","y","type","mode","marker","color","nextProps","time","data1","data2","newData","toConsumableArray","newLayout","assign","setState","_this$state","displayModeBar","react_default","a","createElement","react_plotly_default","config","Component","defaultProps","App","tick","total","newRandomPoint","getNewRandomPoint","newData1","newData2","newTime","push","length","_this2","interval","setInterval","tail","i","Math","floor","random","_this3","_this$state2","className","onClick","event","clearInterval","customPlot","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAGMA,cASJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,CACNC,MAAO,OACPC,OAAQ,OACRC,MAAO,GACPC,aAAc,GAEhBC,KAAM,CACJ,CACEC,EAAG,GACHC,EAAG,GACHC,KAAM,UACNC,KAAM,eACNC,OAAQ,CAAEC,MAAO,SAEnB,CACEL,EAAG,GACHC,EAAG,GACHC,KAAM,UACNC,KAAM,eACNC,OAAQ,CAAEC,MAAO,UAtBNnB,yFA4BOoB,GAAW,IAC3BC,EAA8BD,EAA9BC,KAAMC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,MAAOZ,EAAUS,EAAVT,MACxBa,EAAOvB,OAAAwB,EAAA,EAAAxB,CAAOE,KAAKI,MAAMM,MAE7BW,EAAQ,GAAGV,EAAIO,EACfG,EAAQ,GAAGT,EAAIO,EAEfE,EAAQ,GAAGV,EAAIO,EACfG,EAAQ,GAAGT,EAAIQ,EAEf,IAAMG,EAAYzB,OAAO0B,OAAO,GAAIxB,KAAKI,MAAMC,QAC/CkB,EAAUf,MAAQA,EAClBe,EAAUd,eAEVT,KAAKyB,SAAS,CAAEpB,OAAQkB,qCAGjB,IAAAG,EACkB1B,KAAKI,MAAtBC,EADDqB,EACCrB,OAAQK,EADTgB,EACShB,KACRiB,EAAmB3B,KAAKJ,MAAxB+B,eACR,OAAOC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMxB,OAAQA,EAAQK,KAAMA,EAAMsB,OAAQ,CAAEL,2BAzD9BM,aAAnBtC,EACGuC,aAAe,CACpB1B,MAAO,GACPU,KAAM,GACNC,MAAO,GACPC,MAAO,GACPO,gBAAgB,GAuDLhC,QCWAwC,qBAtEb,SAAAA,EAAYvC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,IACjBtC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,KAAAH,KAAMJ,KA0BRwC,KAAO,WAAM,IAAAV,EAC2B7B,EAAKO,MAAnCc,EADGQ,EACHR,KAAMC,EADHO,EACGP,MAAOC,EADVM,EACUN,MAAOiB,EADjBX,EACiBW,MACtBC,EAAiBzC,EAAK0C,oBACtBC,EAAQ1C,OAAAwB,EAAA,EAAAxB,CAAOqB,GACfsB,EAAQ3C,OAAAwB,EAAA,EAAAxB,CAAOsB,GACfsB,EAAO5C,OAAAwB,EAAA,EAAAxB,CAAOoB,GAEpBwB,EAAQC,KAAKD,EAAQE,OAAS,GAC9BJ,EAASG,KAAK,IACdF,EAASE,MAAMN,EAAQC,GAAkBI,EAAQE,QAEjD/C,EAAK4B,SAAS,CACZP,KAAMwB,EACNvB,MAAOqB,EACPpB,MAAOqB,EACPJ,MAAOA,EAAQC,KAxCjBzC,EAAKO,MAAQ,CACXI,MAAO,uBACPW,MAAO,GACPC,MAAO,GACPF,KAAM,GACNmB,MAAO,EACPV,gBAAgB,GARD9B,mFAYC,IAAAgD,EAAA7C,KAClBA,KAAK8C,SAAWC,YAAY,kBAAMF,EAAKT,QAAQ,gDAK/C,IADA,IAAIY,EAAO,EACFC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAEhB,IADAC,KAAKC,MAAsB,EAAhBD,KAAKE,WAE1BJ,IAGJ,OAAOA,mCAsBA,IAAAK,EAAArD,KAAAsD,EAC+CtD,KAAKI,MAAnDI,EADD8C,EACC9C,MAAOW,EADRmC,EACQnC,MAAOC,EADfkC,EACelC,MAAOF,EADtBoC,EACsBpC,KAAMS,EAD5B2B,EAC4B3B,eACnC,OACEC,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,OACb3B,EAAAC,EAAAC,cAAA,UACE0B,QAAS,SAAAC,GACPJ,EAAK5B,SAAS,CAAEE,gBAAgB,IAChC+B,cAAcL,EAAKP,YAHvB,QAQAlB,EAAAC,EAAAC,cAAC6B,EAAD,CACEnD,MAAOA,EACPU,KAAMA,EACNC,MAAOA,EACPC,MAAOA,EACPO,eAAgBA,YAhERM,cCQE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.58d6de30.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Plot from 'react-plotly.js'\n\nclass CustomPlot extends Component {\n  static defaultProps = {\n    title: '',\n    time: [],\n    data1: [],\n    data2: [],\n    displayModeBar: false,\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      layout: {\n        width: '100%',\n        height: '100%',\n        title: '',\n        datarevision: 0,\n      },\n      data: [\n        {\n          x: [],\n          y: [],\n          type: 'scatter',\n          mode: 'lines+points',\n          marker: { color: 'blue' },\n        },\n        {\n          x: [],\n          y: [],\n          type: 'scatter',\n          mode: 'lines+points',\n          marker: { color: 'red' },\n        },\n      ],\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { time, data1, data2, title } = nextProps\n    let newData = [...this.state.data]\n\n    newData[0].x = time\n    newData[0].y = data1\n\n    newData[1].x = time\n    newData[1].y = data2\n\n    const newLayout = Object.assign({}, this.state.layout)\n    newLayout.title = title\n    newLayout.datarevision++\n\n    this.setState({ layout: newLayout })\n  }\n\n  render() {\n    const { layout, data } = this.state\n    const { displayModeBar } = this.props\n    return <Plot layout={layout} data={data} config={{ displayModeBar }} />\n  }\n}\n\nexport default CustomPlot\n","import React, { Component } from 'react'\nimport Plot from './components/customPlot'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      title: 'Law of Large Numbers',\n      data1: [],\n      data2: [],\n      time: [],\n      total: 0,\n      displayModeBar: false,\n    }\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 10)\n  }\n\n  getNewRandomPoint() {\n    let tail = 0\n    for (let i = 0; i < 100; i++) {\n      const asd = Math.floor(Math.random() * 2)\n      if (asd === 0) {\n        tail++\n      }\n    }\n    return tail\n  }\n\n  tick = () => {\n    const { time, data1, data2, total } = this.state\n    const newRandomPoint = this.getNewRandomPoint()\n    const newData1 = [...data1]\n    const newData2 = [...data2]\n    const newTime = [...time]\n\n    newTime.push(newTime.length + 1)\n    newData1.push(50)\n    newData2.push((total + newRandomPoint) / newTime.length)\n\n    this.setState({\n      time: newTime,\n      data1: newData1,\n      data2: newData2,\n      total: total + newRandomPoint,\n    })\n  }\n\n  render() {\n    const { title, data1, data2, time, displayModeBar } = this.state\n    return (\n      <div className=\"App\">\n        <button\n          onClick={event => {\n            this.setState({ displayModeBar: true })\n            clearInterval(this.interval)\n          }}\n        >\n          Stop\n        </button>\n        <Plot\n          title={title}\n          time={time}\n          data1={data1}\n          data2={data2}\n          displayModeBar={displayModeBar}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}